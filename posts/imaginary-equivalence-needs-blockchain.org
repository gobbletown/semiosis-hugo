#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+OPTIONS: toc:nil

#+HUGO_BASE_DIR: /home/shane/var/smulliga/source/git/semiosis/semiosis-hugo
#+HUGO_SECTION: ./posts

#+TITLE: Imaginary equivalence needs blockchain
#+DATE: <2021-10-14>
#+AUTHOR: Shane Mulligan
#+KEYWORDS: openai codex gpt imaginary-programming

** Summary
I create an Imaginary Hash Function (ùëñHF) for
testing equivalence between arbitrary
ontological things within a LM.

It's 'less robust' than a neural hash but has
a larger domain of comparison. Technically speaking, it's not 'less robust'.
Statistically, the confidence does not vary
widely, and may converge, but I haven't
prompted enough to find out. I plan on experimenting with this
in my thesis on =Imaginary Computing=.

The utility and validity of =Imaginary Programming=, and by extension
_Imaginary Hash Functions_ are emergent qualities in increasingly powerful
language models, and so as the models become stronger, so will the case for =IP=.

# http://github.com/mullikine/imaginary-computing-dissertation-proposal/blob/master/imaginary-programming.org

An ùëñHF  may be used for such things as testing
semantic equivalence, relational equivalence,
ideological equivalence, mathematical
equivalence, you name it.

I just want to run predicates for prompt
functions to determine if they should be made
available as functions.

For example, I want to know if the =pf-explain-solidity-code/1= prompt function
should be made available in the current
context.

The current emacs mode may be, for example,
=eww-mode= (the web browser), but if I am browsing a website with some solidity in it,
a decent predicate may decide that I
might actually *want* the =pf-explain-solidity-code/1= function.

Now if I am using the imaginary web browser
=looking-glass=
(https://semiosis.github.io/looking-glass/),
using =Pen.el=, I may have dreamed up some
solidity code and would like and explanation
for it.

Let's see if I can do that.

** Analysis
*** /Moses = Semerkhet/
+ *A* :: "Semerkhet, the Egyptian king who ruled during the First Dynasty"
+ *B* :: "Moses also known as Moshe Rabbenu"

#+BEGIN_SRC text -n :async :results verbatim code
  TRUE TRUE TRUE TRUE TRUE TRUE TRUE the TRUE TRUE TRUE FALSE TRUE TRUE TRUE
  TRUE TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE TRUE TRUE TRUE FALSE TRUE TRUE
  TRUE
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  Confidence: .90
#+END_SRC

*** /8 = 10/
+ *A* :: 8
+ *B* :: 10

#+BEGIN_SRC text -n :async :results verbatim code
  FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE TRUE FALSE FALSE FALSE FALSE
  FALSE TRUE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE FALSE
  FALSE TRUE FALSE FALSE
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
Confidence: .16
#+END_SRC

*** /Morgan Freeman = God/
#+BEGIN_SRC text -n :async :results verbatim code
  FALSE FALSE FALSE FALSE FALSE FALSE FALSE
  FALSE FALSE FALSE FALSE FALSE FALSE TRUE FALSE
  FALSE FALSE FALSE FALSE FALSE FALSE FALSE
  FALSE FALSE FALSE TRUE FALSE FALSE FALSE FALSE
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  Confidence: .06
#+END_SRC

*** /solidity-mode = Ethereum' language/
+ *A* :: solidity-mode
+ *B* :: Ethereum's language

#+BEGIN_SRC text -n :async :results verbatim code
  FALSE TRUE TRUE FALSE TRUE TRUE FALSE FALSE
  TRUE FALSE FALSE TRUE TRUE FALSE FALSE FALSE
  TRUE TRUE FALSE TRUE TRUE FALSE TRUE TRUE TRUE
  TRUE FALSE TRUE TRUE TRUE
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  Confidence: .60
#+END_SRC

*** /Solidity = Ethereum' language for writing smart contracts/
+ *A* :: Solidity
+ *B* :: Ethereum's language for writing smart contracts

#+BEGIN_SRC text -n :async :results verbatim code
  TRUE FALSE FALSE FALSE TRUE TRUE TRUE TRUE
  TRUE FALSE TRUE TRUE FALSE TRUE TRUE TRUE TRUE
  TRUE FALSE TRUE TRUE TRUE TRUE FALSE FALSE
  TRUE FALSE FALSE TRUE FALSE
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
  Confidence: .63
#+END_SRC

** Prompt
This is my prompt (1st attempt). Though, it
could be vastly improved, it has demonstrated
hash collisions in imaginary space is possible.

+ =pf-test-imaginary-equivalence/2= :: http://github.com/semiosis/prompts/blob/master/prompts/test-imaginary-equivalence-2.prompt
#+BEGIN_SRC yaml -n :async :results verbatim code
  task: "test imaginary equivalence"
  doc: "Given two strings of arbitrary content, test their imaginary equivalence. This is an imaginary neural hash collision test"
  aliases:
  - imaginary hash collision test
  prompt-version: 1
  prompt: |+
    <delim>1
    1/0
    <delim>
    is the same as
    <delim>
    ‚àû
    <delim>
    TRUE because 1 divided by 0 diverges to infinity.
  
    <delim>2
    "Language is everywhere.
  
    It permeates our thoughts mediates our
    relations with others, and even creeps into
    our dreams." -Ronald Wayne Langacker
    <delim>
    is the same as
    <delim>
    FTC Puts Hundreds of Businesses on Notice about Fake Reviews (ftc.gov)
    202 points by walterbell 3 hours ago | flag | hide | 92 comments
    <delim>
    FALSE because they are very unrelated.
  
    <delim>3
    (map
     (fn [x] (+ x 1))
     (range 1 5))
    <delim>
    is the same as
    <delim>
    (map (fn [x] (inc x)) (range 1 5))
    <delim>
    TRUE because `+ x` is equivalent to `inc`.
  
    <delim>3
    e^{i\pi} + 1 = 0
    <delim>
    is the same as
    <delim>
    euler's identity
    <delim>
    TRUE because euler's identity is the name of the equation e^{i\pi} + 1 = 0.
  
    <delim>4
    <a>
    <delim>
    is the same as
    <delim>
    <b>
    <delim>
  
  engine: "OpenAI Codex"
  temperature: 0.3
  max-generated-tokens: "(* 2 prompt-length)"
  top-p: 1.0
  stop-sequences:
  - "<delim>"
  cache: on
  vars:
  - "A"
  - "B"
  examples:
  - "Semerkhet, the Egyptian king who ruled during the First Dynasty"
  - "Moses also known as Moshe Rabbenu"
  filter: on
  completion: off
  insertion: off
  n-collate: 3
  n-completions: 10
  no-uniq-results: on
  results-analyser: pen-analyse-true-or-false
  postprocessor: sed 's/^\([a-zA-Z]*\).*/\1/'
#+END_SRC

** Conclusion
Since this is more than just semantic
similarity, but rather imaginary equivalence,
such a thing needs a consensus mechanism so
that people can write useful software with
large LMs (which is not preventable). Thus
blockchain's value is also not preventable.

** Demo
#+BEGIN_EXPORT html
<!-- Play on asciinema.com -->
<!-- <a title="asciinema recording" href="https://asciinema.org/a/Cdcvoe32hbXpXSrAg1eIJ1oqW" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/Cdcvoe32hbXpXSrAg1eIJ1oqW.svg" /></a> -->
<!-- Play on the blog -->
<script src="https://asciinema.org/a/Cdcvoe32hbXpXSrAg1eIJ1oqW.js" id="asciicast-Cdcvoe32hbXpXSrAg1eIJ1oqW" async></script>
#+END_EXPORT