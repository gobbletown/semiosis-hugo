#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+OPTIONS: toc:nil

#+HUGO_BASE_DIR: /home/shane/var/smulliga/source/git/semiosis/semiosis-hugo
#+HUGO_SECTION: ./

#+TITLE: Examplary
#+DATE: <2021-03-17>
#+AUTHOR: Shane Mulligan
#+KEYWORDS: nlp openai

=Examplary= is an example-oriented DSL that can be used to construct and
compose functions based on prompts and external =String->String= commands.

- Emacs Lisp: http://github.com/semiosis/pen.el/blob/master/src/pen-examplary.el
- Clojure: http://github.com/semiosis/examplary

Using examplary, one can keep track of their various =String->String= functions
but also:
- generate prompts from an example generator
- design prompts using design patterns

#+BEGIN_SRC text -n :async :results verbatim code
  fifth-generation programming language
  s5GL
      Any programming language based on problem
      solving using constraints given to the
      program, rather than using an algorithm
      written by a programmer.
      
      Most constraint-based and logic
      programming languages and some other
      declarative languages are fifth-generation
      languages.
#+END_SRC

Here are some examples:

#+BEGIN_SRC lisp -n :i clj :async :results verbatim code
  (def lines->regex
    :e "grex"
    "example 1\nexample2" "^example [12]$"
    "example 2\nexample3" "^example [23]$"
    "pi4\npi5" "^pi[45]$")

  (def topic->analogy
    ;; Each line is a training example.
    "Neural networks" "Neural networks are like genetic algorithms in that both are systems that learn from experience"
    "Social media" "Social media is like a market in that both are systems that coordinate the actions of many individuals.")

  (def topic->field-of-study
    "chemistry" "study of chemicals"
    "biology" "study of living things")

  (def cron->natural-language
    :e "interpret-crontab"
    "17 *	* * *" "At minute 17."
    "25 6	* * *" "At 06:25."
    "47 6	* * 7" "At 06:47 on Sunday."
    "52 6	1 * *" "At 06:52 on day-of-month 1.")
#+END_SRC

| syntax | description                                                        |
|--------+--------------------------------------------------------------------|
| =:g=   | external generator command                                         |
| =:i=   | specifies a source of input (training) strings from a =jsonl= file |
| =:o=   | specifies an output file for outputting =jsonl=                    |

+ _external generator command_ :: specifies an external [pipable] command which
    can generate examples or as a source of truth
    for query reformulation (when generating
    prompts)

*** Related links
- Code: http://github.com/semiosis/examplary
- Design patterns: http://github.com/semiosis/prompt-engineering-patterns

# + Website :: [[http://mullikine.github.io/][Bodacious Blog]]
# + GitHub :: https://github.com/IpsumDominum