#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+OPTIONS: toc:nil

#+HUGO_BASE_DIR: /home/shane/var/smulliga/source/git/semiosis/semiosis-hugo
#+HUGO_SECTION: ./posts

#+TITLE: Browsing the imaginary web with Codex
#+DATE: <2021-09-09>
#+AUTHOR: Shane Mulligan
#+KEYWORDS: codex openai emacs

** Summary
I make an imaginary web browser. This will be
improved in the future, but it's already
fairly trivial to browse the imaginary web.
Let me show you how.

There is no need for the websites returned to
be perfect as we have a tool =Codex=, which
can make sense of the imperfect. This works
fine as it is, just open your mind on the way
in which people should view and interact with
the web.

- /Visit any website you can imagine, even the ones that aren't real!/
- Edit and re-imagine as you go!

** The Definitive Demo
#+BEGIN_EXPORT html
<!-- Play on asciinema.com -->
<!-- <a title="asciinema recording" href="https://asciinema.org/a/GD8hBG0GvxCnAoFtuFSygJEtD" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/GD8hBG0GvxCnAoFtuFSygJEtD.svg" /></a> -->
<!-- Play on the blog -->
<script src="https://asciinema.org/a/GD8hBG0GvxCnAoFtuFSygJEtD.js" id="asciicast-GD8hBG0GvxCnAoFtuFSygJEtD" async></script>
#+END_EXPORT

** Related
- [[https://mullikine.github.io/posts/search-the-web-with-codex/][Search the web with Codex {bye Google} // Bodacious Blog]]

The above prompt for searching and generating
URLs has been modified to remove the
constraint that the return URLs must be real.

#+BEGIN_SRC yaml -n :async :results verbatim code
  # This contraint is not needed for the imaginary internet
  # validator: url-exists
#+END_SRC

** Looking Glass üîç web browser
This is a demonstraction of an imaginary/complex web browser named /Looking Glass/.

+ The real website :: https://rebeccaskinner.net/posts/2021-08-25-introduction-to-type-level-programming.html

The opening text:
#+BEGIN_SRC text -n :async :results verbatim code
  An Introduction to Type Level Programming
  
  Posted on August 25, 2021 by Rebecca Skinner 
  
  Prelude
  
   
  
  This blog post is a long-form article based on a talk I delivered at the
  haskell.love conference on 10 Sept 2021. Keep an eye out here and I will
  update this section with a link to the recording of the talk when it‚Äôs
  available.
  
  The original slides for this talk are available on github along with the
  complete source code for the examples used in this article and the talk.
  
  An Introduction to Type-Level Programming
#+END_SRC

I will now use Pen.el to imagine the same website.
This will use the Codex engine.

Here are 2 possible continuations.

#+BEGIN_SRC text -n :async :results verbatim code
https://rebeccaskinner.net/posts/2021-08-25-introduction-to-type-level-programming.html

                Introduction to Type-Level Programming

   Posted by Rebecca Skinner on 25 August 2021
   4 min read

   Type-level programming is well suited for statically typed languages
   with pattern matching, like Haskell. It isn‚Äôt always the right
   solution, though‚Ä¶

   Type-level programming is also pretty different from other
   statically typed languages. It‚Äôs not the only paradigm. So, let‚Äôs
   look at some examples. If you‚Äôre familiar with Haskell, these
   examples should look familiar to you.
#+END_SRC

#+BEGIN_SRC text -n :async :results verbatim code
https://rebeccaskinner.net/posts/2021-08-25-introduction-to-type-level-programming.html

                                                                                                          Introduction to Type-Level Programming
    by Rebecca Skinner

This post is also available in two other formats:

    PDF  |  Slides

New to type-level programming?

You might want to check out my post on introduction to type-level
programming, which includes links to free versions of my textbook,
Real World Haskell, and my favorite Haskell libraries. Or if you‚Äôre
new to this concept, you might want to read my article on how Haskell
reduced my software development time by 95%.

Theory of Types

Even if you‚Äôre not familiar with type-level programming in general,
it‚Äôs still important to know what it is. What‚Äôs more, even if you‚Äôre
familiar with Haskell, there are some concepts in Haskell that make type-level
programming easier, like type synonyms.

But in case you‚Äôre unfamiliar, type-level programming is a style of
programming that uses types in place of strings or identifiers in
order to describe the behavior of your program. Here‚Äôs an example of
a simple type-level program:

Tutorial.Data.Maybe
#+END_SRC

I have selected the first.

I then generate two more possible continuations.

And I select this one:

#+BEGIN_SRC text -n :async :results verbatim code
 If not, hopefully they
   illustrate the core concepts.

   What is it good for?

   The first thing I want to show you is that type-level programming
   is great for expressing common programming patterns.

   A perfectly valid question you might ask is ‚Äúwhy not just code it
   that way?‚Äù Well‚Ä¶here‚Äôs the thing. Type-level programming has the
   ability to express concepts at multiple levels of abstraction, so
   whomever‚Äôs reading your code can quickly zoom in on the relevant
   parts.

   To demonstrate this, I‚Äôm going to jump right in. We‚Äôll start with
   pattern matching.

   Pattern Matching

   I‚Äôll show you how you can simulate pattern matching with type-level
   booleans, just like you can with `case` expressions in Haskell.

   Booleans are just numbers, so you can compare
#+END_SRC

But I want to change the topic. So I change "What is it good for?" to "What is it not good for?"

#+BEGIN_SRC text -n :async :results verbatim code
Due to its type system, Haskell is great for eliminating runtime
   errors.

   This is because the compiler is able to prove that a piece of code
   will not throw a runtime error, and thus no runtime code is
   executed. This allows code to be written with no runtime checks.

   This is why Haskell can have a single, undisturbed type hierarchy
   with no runtime checks. In fact, this is why Haskell is the only
   fully-featured purely-typed functional language. It‚Äôs reference
   implementation, GHC, is also known for its correctness, if not
   performance.

   However, runtime checks prevent the compiler from building a
   completely pure, efficient type system.

   In a purely type-safe language, you can reason about a program by
   simply knowing its type.

   This allows you to avoid all runtime checks by simply knowing the
   structure of a program, and
#+END_SRC

** Demo
- Imagine a website from a URL url: http://ascii-art.com/octopuss
- Imagine a website from a URL url: http://ascii-art.com/octopuss
- Imagine a website from a URL url: http://funny-jokes.com/cat
- Imagine a website from a URL url: http://computer-help.com?question=how%20do%20i%20browse%20the%20internet
- https://en.wikipedia.org/wiki/Accelerationism

#+BEGIN_EXPORT html
<!-- Play on asciinema.com -->
<!-- <a title="asciinema recording" href="https://asciinema.org/a/erGo5858UQgMIPjv0eGzMVBRe" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/erGo5858UQgMIPjv0eGzMVBRe.svg" /></a> -->
<!-- Play on the blog -->
<script src="https://asciinema.org/a/erGo5858UQgMIPjv0eGzMVBRe.js" id="asciicast-erGo5858UQgMIPjv0eGzMVBRe" async></script>
#+END_EXPORT

#+BEGIN_EXPORT html
<!-- Play on asciinema.com -->
<!-- <a title="asciinema recording" href="https://asciinema.org/a/1ATlUjWVRqgMqb83MsaFMvpeu" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/1ATlUjWVRqgMqb83MsaFMvpeu.svg" /></a> -->
<!-- Play on the blog -->
<script src="https://asciinema.org/a/1ATlUjWVRqgMqb83MsaFMvpeu.js" id="asciicast-1ATlUjWVRqgMqb83MsaFMvpeu" async></script>
#+END_EXPORT

#+BEGIN_SRC text -n :async :results verbatim code
  http://www.economist.com/blogs/graphicdetail/2012/09/growth
  http://www.economist.com/printedition/2012-09-13
  http://graphics8.nytimes.com/newsgraphics/2012/10/30/us-gdp-vs-europe-by-state/us-gdp-vs-europe-by-state.html
  http://www.economist.com/blogs/graphicdetail/2012/10/growth-or-acceleration
  http://www.economist.com/news/britain/21583272-many-countries-match-chinas-rapid-rural-migration-chinas-progress
  http://www.economist.com/news/britain/21582529-how-did-china-manage-stop-its-population-growing-did-its-policies-work
  http://www.economist.com/node/21583245
  http://www.economist.com/node/21583254
  http://www.economist.com/news/britain/21583283-growth-or-acceleration-britains-big-challenge-itself-time-start-year
  http://www.economist.com/news/science-and-technology/21583624-building-new-ones-or-adding-new-parts-old-ones-big-ones-science-and
  http://www.economist.com/news/leaders/21583640-governments-should-ditch-their-ambivalent-approach-big-challenges-new-long-way
  https://www.economist.com/node/21541143
#+END_SRC

** Prompt
For the demo, to speed up website generation,
I have set completions to 1.

#+BEGIN_SRC yaml -n :async :results verbatim code
  n-collate: 1
  n-completions: 1
#+END_SRC

*** =pf-imagine-a-website-from-a-url/1=
#+BEGIN_SRC yaml -n :async :results verbatim code
  task: "Imagine a website from a URL"
  doc: "Given a URL, imagine the HTML for that page"
  prompt-version: 2
  prompt: |+
    Lynx, an ascii web browser.
    """
    lynx --dump -nolist "http://google.com" | head -n 30 <<EOD
    http://google.com
  
    Search Images Maps Play YouTube News Gmail Drive More ¬ª
    Web History | Settings | Sign in
    To all doctors, nurses, and medical workers, thank you
    
    ________________________________________________________    Advanced search
    [ Google Search ]   [ I'm Feeling Lucky ]
    
    Google offered in: MƒÅori
    Advertising Programs     Business Solutions     About Google     Google.co.nz
    
    (c) 2021 - Privacy - Terms
    EOD
  
    lynx --dump -nolist "https://www.apple.com/" | head -n 30 <<EOD
    https://www.apple.com/
  
                                         Apple
  
       We look forward to welcoming you to our stores. Whether you shop in a
       store or shop online, our Specialists can help you buy the products
       you love. Shop with a Specialist, get credit with Apple Trade In,
       choose free delivery or pickup, and more at the Apple Store Online.
       Shop with a Specialist, get credit with Apple Trade In, choose free
       delivery or pickup, and more at the Apple Store Online.
    
    
    iPhone 12
    
    Blast past fast.
    
       From $29.12/mo. for 24 mo. or $699 before trade‚Äëin^1
    
       Buy directly from Apple with special carrier offers
       Learn more Learn more Buy
    
    
    iPhone 12 Pro
    
    It‚Äôs a leap year.
    
       From $41.62/mo. for 24 mo. or $999 before trade‚Äëin^1
    
       Buy directly from Apple with special carrier offers
       Learn more Learn more Buy
    EOD
  
    # "<q:url>" rendered in ASCII:
    lynx --dump -nolist "<q:url>" | head -n 30 <<EOD
    <url>
  
  
  engine: "OpenAI Codex"
  n-collate: 1
  n-completions: 2
  temperature: 0.5
  max-generated-tokens: "(/ prompt-length 2)"
  top-p: 1.0
  stop-sequences:
  - EOD
  cache: on
  vars:
  - "url"
  examples:
  - "http://www.gprolog.org/"
  info: on
  completion: off
  insertion: off
#+END_SRC

** I browsed the imaginary web for Sam Altman's recent interview
- https://www.lesswrong.com/posts/aihztgJrknBdLHjd2/sam-altman-q-and-a-gpt-and-agi/#_About_GPT4

The first result was baffling.

Speak of messages from the future! GPT-3 was trained in 2019 after all.

#+BEGIN_SRC text -n :async :results verbatim code
  About GPT-4
  
  Sam Altman - Q&A - GPT-4 & AGI
  
  I recently published a long Medium post on the
  potential dangers of AGI. I also promised to
  do an interview about GPT-4,
  
  It's not too late to change your mind.
  
  GPT-4 is the name of a new generation of
  Transformers-based generative models, recently
  published by researchers at OpenAI.
  
  GPT-4 is the first completely self-supervised
  LM of essentially unlimited size, trained on
  an effectively unlimited amount of text.
  
  GPT-4 is the first model to demonstrate human-
  level language understanding without any human
  effort. It is the first model to demonstrate
  unsupervised learning of high-quality, high-
  resolution, and long-range text understanding.
  
  
  
  Sam Altman is the President and Co-Founder of
  initial seed fund Y Combinator. He writes the
  Ask a VC column on Hacker News and co-hosts
  the RSS podcast Hacker News Radio. He is the
  author of the textbook The VC Handbook.
  
  Sam Altman
  
  1:12
  
  What do you think of this idea?
  
  I think AGI is a serious concern and we're
  making progress on solving it. GPT-4 is an
  incredibly exciting and interesting new
  development. 
  
  GPT-4 is a product of OpenAI and I‚Äôm excited
  about it because it‚Äôs a demonstration of the
  power of unsupervised learning. This is really
  exciting. It‚Äôs basically a demonstration of
  the power of unsupervised learning.
  
  
  Sam Altman
  
  1:18
  
  What
  
  Next result:
  
  https://www.lesswrong.com/posts/aihztgJrknBdLHjd2/sam-altman-q-and-a-gpt-and-agi/#_About_GPT4
  
                                                                                                                   Q and A:
  
  How can explain and/or explain why GPT-4 is so
  much better than GPT-3 at conversational and
  QA?
  
  When can we expect to have GPT-2 and GPT-3 be
  as good as GPT-4 at conversational and QA?
  
  Are there any useful things we can do with
  GPT-4 that we can't with GPT-3 to increase
  performance even further?
#+END_SRC
