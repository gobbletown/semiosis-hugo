#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+OPTIONS: toc:nil

#+HUGO_BASE_DIR: /home/shane/var/smulliga/source/git/semiosis/semiosis-hugo
#+HUGO_SECTION: ./posts

#+TITLE: Translating Haskell to Clojure with GPT-3
#+DATE: <2021-03-07>
#+AUTHOR: Shane Mulligan
#+KEYWORDS: GPT-3 openai emacs

+ Relevant material :: https://hyperpolyglot.org/ml

** Summary
Who needs =hyperpolyglot= when you have =GPT-3=?

I translate Haskell into Clojure using the following prompt.

*** =haskell-to-clojure.prompt=
#+BEGIN_SRC yaml -n :async :results verbatim code
  title: "Translate Haskell to Clojure"
  prompt: |+
      Haskell:
      zip (map show [1,5,9]) ["a","b","c"] 
      Clojure:
      (println (map vector '(1 2 3) '(4 5 6))) 
      
      Haskell:
      map toUpper "MiXeD cAsE" 
      Clojure:
      (clojure.string/upper-case "MiXeD cAsE")
      
      Haskell:
      putStrLn "Hello World"
      Clojure:
      (println "Hello World")
      
      Haskell: 
      import Data.Time.Clock
      import Data.Time.Calendar
      date :: IO (Integer, Int, Int) -- :: (year, month, day)
      date = getCurrentTime >>= return . toGregorian . utctDay
      Clojure: 
      (defn date [] (.toString (java.util.Date.)))
  
      Haskell: 
      <1>
      Clojure:
  engine: "davinci"
  temperature: 0.3
  max-tokens: 60
  top-p: 1.0
  frequency-penalty: 0.5
  # If I make presence-penalty 0 then it will get very terse
  presence-penalty: 0.0
  best-of: 1
  stop-sequences:
  - "\n\n"
  inject-start-text: yes
  inject-restart-text: yes
  show-probabilities: off
  vars:
  - "haskell code"
  examples:
  - "min 1 2"
  external: ""
  filter: no
  # Keep stitching together until reaching this limit
  # This allows a full response for answers which may need n*max-tokens to reach the stop-sequence.
  stitch-max: 0
#+END_SRC

** Demonstrations
#+BEGIN_EXPORT html
<a title="asciinema recording" href="https://asciinema.org/a/64hjDdeeqkhTEzZA9RvYjKyy9" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/64hjDdeeqkhTEzZA9RvYjKyy9.svg" /></a>
#+END_EXPORT

#+BEGIN_EXPORT html
<a title="asciinema recording" href="https://asciinema.org/a/UknQeVwRejokdRKJEYa7KdNKk" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/UknQeVwRejokdRKJEYa7KdNKk.svg" /></a>
#+END_EXPORT

** Translate Haskell into Clojure
_*Haskell*_
#+BEGIN_SRC haskell -n :i "babel-ghci -norc" :async :results verbatim code
div 7 3
#+END_SRC

_*Clojure*_
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (/ 7 3)
#+END_SRC

** It's not perfect
_*Haskell*_
#+BEGIN_SRC haskell -n :i "babel-ghci -norc" :async :results verbatim code
z = x * y
  where x = 3.0
        y = 2.0 * x
#+END_SRC

_*Clojure*_
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (defn z [x y] (* y x))
#+END_SRC

** But it's *pretty good*
_*Haskell*_
#+BEGIN_SRC haskell -n :i "babel-ghci -norc" :async :results verbatim code
  let absn = if n < 0 then -n else n
#+END_SRC

_*Clojure*_
#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (defn absn [n] (if (negative? n) (- n) n))
#+END_SRC