#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+OPTIONS: toc:nil

#+HUGO_BASE_DIR: /home/shane/var/smulliga/source/git/semiosis/semiosis-hugo
#+HUGO_SECTION: ./posts

#+TITLE: Universal file parser and query tool in emacs
#+DATE: <2021-04-29>
#+AUTHOR: Shane Mulligan
#+KEYWORDS: antlr emacs semantic

** Summary
I make a way to get a more abstract
representation of any type of file or buffer in emacs
utilising parsers, =antlr4= in particular.

I also want to be able to query the contents
of the source code.

I also want to be able to query prose programmatically.

*** Motivation
In the past I have used =ctags= to get simple
lists of source code components such as
functions and classes. I would like to have
much finer control over queries to source
code.

The reason I want an automated way of parsing
and then querying source code and prose is so
I can build tooling which automates it and be
programming at a higher abstraction level.

*** External parsers used
- =antlr=
- GitHub =semantic=
- =json2hcl=
- =ej=

** Problems encountered
=antlr= seems to be fairly unreliable at
parsing, or at least is too pedantic for this purpose.

I will attempt to do this with GitHub's
=semantic= parser as it is designed to be a
pragmatic parser.

** Demonstration
*** Going from =edn= to =json= to =json schema=
All I need to do is press =M-&= 2 times to do this.

The idea is that every time you press =M-&=,
it takes you to a more abstract representation
of what you are looking at.

#+BEGIN_EXPORT html
<!-- Play on asciinema.com -->
<!-- <a title="asciinema recording" href="https://asciinema.org/a/EYxLJ4n65VrgGGfmanUKNyrbz" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/EYxLJ4n65VrgGGfmanUKNyrbz.svg" /></a> -->
<!-- Play on the blog -->
<script src="https://asciinema.org/a/EYxLJ4n65VrgGGfmanUKNyrbz.js" id="asciicast-EYxLJ4n65VrgGGfmanUKNyrbz" async></script>
#+END_EXPORT

*** Using the universal antlr parser
#+BEGIN_EXPORT html
<script src="https://asciinema.org/a/q7QBII745RFxIUdsBwbwVDNfl.js" id="asciicast-q7QBII745RFxIUdsBwbwVDNfl" async></script>
#+END_EXPORT

** Steps
*** Set up antlr
Follow the setup instructions.

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  curl -O https://www.antlr.org/download/antlr-4.7.1-complete.jar
#+END_SRC

Create the =antlr4= script.

=antlr4=
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  #!/bin/bash
  export TTY
  
  ( hs "$(basename "$0")" "$@" "#" "<==" "$(ps -o comm= $PPID)" 0</dev/null ) &>/dev/null
  
  export CLASSPATH=".:$HOME/local/lib/antlr-4.7.1-complete.jar:$CLASSPATH"
  
  sn="$(basename "$0")"
  
  case "$sn" in
      grun) {
          java -Xmx500M -cp "/usr/local/lib/antlr-4.7.1-complete.jar:$CLASSPATH" org.antlr.v4.gui.TestRig "$@"
      }
      ;;
  
      *) {
          java -Xmx500M -cp "/usr/local/lib/antlr-4.7.1-complete.jar:$CLASSPATH" org.antlr.v4.Tool "$@"
      }
      ;;
  esac
#+END_SRC

Create the =universal-antlr-parse= script.

=universal-antlr-parse=
#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  #!/bin/bash
  export TTY

  ( hs "$(basename "$0")" "$@" "#" "<==" "$(ps -o comm= $PPID)" 0</dev/null ) &>/dev/null

  grammar_fp="$1"
  src="$2"

  stdin_exists() {
      ! [ -t 0 ] && ! test "$(readlink /proc/$$/fd/0)" = /dev/null
  }

  if test -f "$src"; then
      src="$(cat "$src")"
  fi

  if ! test -n "$src" && stdin_exists; then
      src="$(cat)"
  fi

  # grammar_fp=$MYGIT/antlr/grammars-v4/json/JSON.g4

  cd $MYGIT/mullikine/universal-antlr-clojure-visitor-interpreter
  lein run "$grammar_fp" "$src" | pavs
#+END_SRC

*** Obtain the grammars
https://github.com/antlr/grammars-v4

*** Create a parsing utility in clojure
+ Code :: http://github.com/mullikine/universal-antlr-clojure-visitor-interpreter

#+BEGIN_SRC clojure -n :i clj :async :results verbatim code
  (ns universal-antlr-clojure-visitor-interpreter.core
    (:gen-class)
    (:require [clj-antlr.core :as antlr]
              [clojure.pprint :as pp]))
  
  (defn -main
    "I don't do a whole lot ... yet."
    [& args]
    ;; Use :throw? to ignore errors
    (def parser (antlr/parser (first args) {:throw? false}))
    (pp/pprint (parser (slurp (second args)))))
#+END_SRC

=demo=: Creating a parse tree with =antlr=.
#+BEGIN_EXPORT html
<!-- Play on asciinema.com -->
<!-- <a title="asciinema recording" href="https://asciinema.org/a/QFTXJWTmZupXuLcLGpirm4NIl" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/QFTXJWTmZupXuLcLGpirm4NIl.svg" /></a> -->
<!-- Play on the blog -->
<script src="https://asciinema.org/a/QFTXJWTmZupXuLcLGpirm4NIl.js" id="asciicast-QFTXJWTmZupXuLcLGpirm4NIl" async></script>
#+END_EXPORT

*** Create an interface in emacs
=my-file-parsers.el=
#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  ;; Mode is not enough information to determine

  (defun antlr-list-all-grammars ()
    (snc "cd $MYGIT/antlr/grammars-v4/; find . -name '*.g4' | xargs -l basename | sed 's/\..*//'"))

  (defun antlr-grammar-path-from-name (name)
    (let* ((cmd (format
                 "cd $MYGIT/antlr/grammars-v4/; find . -iname '%s.g4' | sed 's/.\\///' | head -n 1"
                 name))
           (result (snc cmd)))
      (if (sor result)
          (umn (concat "$MYGIT/antlr/grammars-v4/"
                       result)))))

  ;; $MYGIT/antlr/grammars-v4/

  (defun get-buffer-python-version ()
    (if (string-equal (detect-language) "python")
        (snc (cmd "vermin" (tf "python" (buffer-string))))))

  (defun antlr-detect-language ()
    ;; Detecting the language is not good enough
    ;; Sometimes I also need to know the language version, such as python3
    (let ((lang (detect-language)))
      (cond ((string-equal lang "python")
             (concat "python" (get-buffer-python-version)))
            (t lang))))

  ;; universal-antlr-parse "$MYGIT/antlr/grammars-v4/json/JSON.g4" "[4, 5, 6]"
  (defset file-parser-2-tuples
    '(((major-mode-p 'terraform-mode)
       . "json2hcl -reverse")
      ((major-mode-p 'json-mode)
       . "zh -j")
      ((and (major-mode-p 'clojure-mode)
            (string-equal "edn" (f-ext (get-path))))
       . "ej | jq .")
      ((sor (antlr-grammar-path-from-name (f-ext (get-path))))
       . (snc (cmd "universal-antlr-parse" (antlr-grammar-path-from-name (f-ext (get-path)))) (buffer-string)))
      ((sor (antlr-grammar-path-from-name (antlr-detect-language)))
       . (snc (cmd "universal-antlr-parse" (antlr-grammar-path-from-name (antlr-detect-language))) (buffer-string)))))

  (defun assoc-collect-true (al)
    (-distinct
     (-flatten
      (cl-loop
       for
       kv
       in
       al
       collect
       (if (eval (car kv)) (cdr kv))))))

  (defun assoc-get-first-true (al)
    (car (assoc-collect-true al)))


  ;; (defun get-parse-for-file (path)
  ;;   (interactive (list (current-path)))

  ;;   (assoc 'terraform-mode file-parser-2-tuples))

  (defun parse-current-buffer ()
    (interactive)

    (let ((parser
           (assoc-get-first-true file-parser-2-tuples)))
      (if parser
          (let ((parse
                 (if (stringp parser)
                     (snc (concat parser " 2>&1") (buffer-string))
                   (eval parser))))
            (if (sor parse)
                (with-current-buffer
                    (nbfs
                     parse)
                  (detect-language-set-mode))
              (message "No parse created")))))

    ;; (let* (;; (p (current-path))
    ;;        (cm major-mode)
    ;;        (parser (assoc cm file-parser-2-tuples)))
    ;;   (if parser
    ;;       (let ((parse (snc (concat (cdr parser) " 2>&1") (buffer-string))))
    ;;         (if (sor parse)
    ;;             (with-current-buffer
    ;;                 (nbfs
    ;;                  parse)
    ;;               (detect-language-set-mode))
    ;;           (message "No parse created")))))
    )

  (define-key my-mode-map (kbd "H-&") 'parse-current-buffer)

  (provide 'my-file-parsers)
#+END_SRC