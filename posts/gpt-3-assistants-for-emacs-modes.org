#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+OPTIONS: toc:nil

#+HUGO_BASE_DIR: /home/shane/var/smulliga/source/git/semiosis/semiosis-hugo
#+HUGO_SECTION: ./posts

#+TITLE: GPT-3 assistants for emacs modes
#+DATE: <2021-06-02>
#+AUTHOR: Shane Mulligan
#+KEYWORDS: gpt emacs

** Summary
I'm looking for places to integrate GPT-3 into emacs.

Context menus for refactoring stuff is good.

I'd also like to make some personal
assistants, so I can do things like select
error messages and ask what they mean.

Please see my article on =Pen= (Prompt Engineering in emacs) [[https://mullikine.github.io/posts/pen/][Pen // Bodacious Blog]].

Please email me if you would like to help: mailto:mullikine@gmail.com.

Pen facilitates the creation, development,
discovery and usage of prompts to a LM such as
GPT-3 and GPT-j.

+ =pen.el= code :: https://github.com/semiosis/pen.el

** =shell=
This is what I want to integrate into emacs.

*** =asktutor=
+ Code :: https://github.com/semiosis/pen.el/blob/master/scripts/openai-complete.sh

#+BEGIN_SRC sh -n :sps bash :async :results none
  asktutor haskell ghc "What does could not deduce mean?"
#+END_SRC

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  #!/bin/bash
  export TTY
  
  topic="$1"
  test -n "$topic" || exit 1
  shift
  
  in_the_context_of="$1"
  test -n "$in_the_context_of" || exit 1
  shift
  
  question="$@"
  test -n "$question" || exit 1
  
  if ! pl "$question" | grep -q -P ".*\\?"; then
      question="${question}?"
  fi
  
  oci openai-complete $MYGIT/semiosis/prompts/prompts/tutor.prompt "$topic" "$in_the_context_of" "$question" | pavs
#+END_SRC

#+BEGIN_SRC sh -n :sps bash :async :results none
  cq haskell could not deduce from the context
#+END_SRC

** Converting above into elisp together with a prompt function
=pen-pf-asktutor= is generated from a =.prompt= file.

*** =pen-tutor-mode-assist=
+ Code :: http://github.com/semiosis/pen.el/blob/master/pen-contrib.el

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  (defun pen-tutor-mode-assist (query)
    (interactive (let* ((bl (buffer-language t t)))
                   (list
                    (read-string-hist
                     (concat "asktutor (" bl "): ")
                     (my/thing-at-point)))))
    (pen-pf-asktutor bl bl query))
#+END_SRC

*** =right-click-context-click-menu=
+ Right click menu code :: https://github.com/semiosis/pen.el/blob/master/pen-right-click-menu.el#L126

#+BEGIN_SRC emacs-lisp -n :async :results verbatim code
  ("GPT-3: Convert Haskell to Clojure"
   :call pen-pf-translate-haskell-to-clojure
   :if (gpt-test-haskell))
  ("pen (code)"
   ("asktutor"
    :call pen-tutor-mode-assist
    :if (major-mode-p 'prog-mode)))
#+END_SRC

** Tutor =GPT-3= prompt in =yaml=
[[./tutor-code.png]]

=tutor.prompt=

+ Tutor prompt :: http://github.com/semiosis/prompts/blob/master/prompts/tutor.prompt

+ Tutor elisp code :: https://github.com/semiosis/pen.el/blob/master/pen-brain.el#L98