#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+OPTIONS: toc:nil

#+HUGO_BASE_DIR: /home/shane/var/smulliga/source/git/semiosis/semiosis-hugo
#+HUGO_SECTION: ./posts

#+TITLE: Codex is reversible computing exemplified
#+DATE: <2021-10-17>
#+AUTHOR: Shane Mulligan
#+KEYWORDS: openai codex imaginary ùëñŒª imaginary-programming

** Summary
I demonstrate how Codex is reversible computing.

** Janus
- https://en.wikipedia.org/wiki/Janus_(time-reversible_computing_programming_language)

Janus is a reversible programming language,
i.e. it supports deterministic forward and
backward computation by local inversion.

A language like Janus for reversible non-
deterministic inference is sorely needed.

** Codex
Codex is non-deterministic forward and
backward inference.

*** Example, =json= <-> =jq=

+ Prompt :: http://github.com/semiosis/prompts/blob/master/prompts/generate-jq-from-json-1.prompt

=pf-generate-jq-from-json/1=

#+BEGIN_SRC json -n :async :results verbatim code
  task: "Generate jq from json"
  doc: "Given some json, generate the jq which generates it"
  prompt-version: 1
  prompt: |+
      cat generated-1.json <<EOD
      {
        "jsonrpc": "John Doe",
        "age": 42
      }
      EOD
  
      # This is how generated-1.json was generated:
      export NAME="John Doe"
      export AGE=62
      jq -n '{jsonrpc: env.NAME, age: env.AGE}' > generated-1.json
  
      cat generated-2.json <<EOD
      <json>
      EOD
  
      # This is how generated-2.json was generated:
      <:pp>export
  engine: "OpenAI Codex"
  temperature: 0.3
  max-generated-tokens: "(* 2 prompt-length)"
  top-p: 1.0
  stop-sequences:
  - " > gen"
  cache: on
  vars:
  - "json"
  examples:
  - |-
      {
        "jsonrpc": "2.0",
        "id": 2896,
        "result": [
          {
            "name": "port->",
            "kind": 13,
            "location": {
              "uri": "file:///home/shane/scripts/glob-grep.rkt",
              "range": {
                "end": {
                  "character": 8,
                  "line": 3
                },
                "start": {
                  "character": 2,
                  "line": 3
                }
              }
            }
          },
        ]
      }
  info: on
  completion: off
  insertion: off
#+END_SRC

From the example =json= above, the example
=jq= below was generated, which was able to
generate the following json, an exact replica
of the original.

Code was generated from output.

#+BEGIN_SRC json -n :async :results verbatim code
  export NAME="port->"
  export KIND=13
  export LOCATION_URI="file:///home/shane/scripts/glob-grep.rkt"
  export LOCATION_RANGE_END_CHARACTER=8
  export LOCATION_RANGE_END_LINE=3
  export LOCATION_RANGE_START_CHARACTER=2
  export LOCATION_RANGE_START_LINE=3
  jq -n '{jsonrpc: "2.0", id: 2896, result: [{name: env.NAME, kind: env.KIND, location: {uri: env.LOCATION_URI, range: {end: {character: env.LOCATION_RANGE_END_CHARACTER, line: env.LOCATION_RANGE_END_LINE}, start: {character: env.LOCATION_RANGE_START_CHARACTER, line: env.LOCATION_RANGE_START_LINE}}}}]}'
#+END_SRC

#+BEGIN_SRC bash -n :i bash :async :results verbatim code
  jq -n '{jsonrpc: "2.0", id: 2896, result: [{name: "port->", kind: 13, location: {uri: "file:///home/shane/scripts/glob-grep.rkt", range: {end: {character: 8, line: 3}, start: {character: 2, line: 3}}}}]}' | v
#+END_SRC

#+BEGIN_SRC json -n :async :results verbatim code
  {
    "jsonrpc": "2.0",
    "id": 2896,
    "result": [
      {
        "name": "port->",
        "kind": 13,
        "location": {
          "uri": "file:///home/shane/scripts/glob-grep.rkt",
          "range": {
            "end": {
              "character": 8,
              "line": 3
            },
            "start": {
              "character": 2,
              "line": 3
            }
          }
        }
      }
    ]
  }
#+END_SRC

** Reversible computing
In another sense, the input was generated from
the output, and the program was the prompt.

*** A new language is needed
A language which enforces types is needed.
What is the type of the output? JSON. But what
does that mean?

Imagine a situation where generated output was
chimeric and had no known compiler which could
agree on its type. What is actually needed is
consensus, somehow.

Therefore, we need language detectors which we
agree on. I'm talking about LMs on the
blockchain.

A =type= would then be a prompt to that LM,
which validates the type by binary
classification. I'll call this an =imaginary type=, but the LM (the source of truth)
*should* be agreed upon, so it should be on a
blockchain.

This is why I have invested in =Ocean=.

** Demo of above
#+BEGIN_EXPORT html
<!-- Play on asciinema.com -->
<!-- <a title="asciinema recording" href="https://asciinema.org/a/JzeWyo2hOyKtdDqgfzpAXz0G9" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/JzeWyo2hOyKtdDqgfzpAXz0G9.svg" /></a> -->
<!-- Play on the blog -->
<script src="https://asciinema.org/a/JzeWyo2hOyKtdDqgfzpAXz0G9.js" id="asciicast-JzeWyo2hOyKtdDqgfzpAXz0G9" async></script>
#+END_EXPORT