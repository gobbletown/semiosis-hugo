#+LATEX_HEADER: \usepackage[margin=0.5in]{geometry}
#+OPTIONS: toc:nil

#+HUGO_BASE_DIR: /home/shane/var/smulliga/source/git/semiosis/semiosis-hugo
#+HUGO_SECTION: ./posts

#+TITLE: An imaginary linter with Codex
#+DATE: <2021-09-01>
#+AUTHOR: Shane Mulligan
#+KEYWORDS: awk openai gpt codex pen

** Summary
I demonstrate an imaginary linter with Codex.
This predicts an error message for a line of
awk code. However, it also infers when the
code is correct, so it's useful.

The accuracy is not really good enough to make a reliable
imaginary linter, but should work better with
more popular languages such as Python.

In any case, I will build the tooling around
prompts to perform linting.

** Demo
*** Correctly identifies syntax error 7 times out of 20
#+BEGIN_EXPORT html
<!-- Play on asciinema.com -->
<!-- <a title="asciinema recording" href="https://asciinema.org/a/d6k4Ez4aJz4VVezjw256WqDpp" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/d6k4Ez4aJz4VVezjw256WqDpp.svg" /></a> -->
<!-- Play on the blog -->
<script src="https://asciinema.org/a/d6k4Ez4aJz4VVezjw256WqDpp.js" id="asciicast-d6k4Ez4aJz4VVezjw256WqDpp" async></script>
#+END_EXPORT

#+BEGIN_SRC text -n :async :results verbatim code
  6:   }
  5:         ^ syntax error
  6:     }
  5:         ^ syntax error
  5:         ^ syntax error
  5:         ^
  6:     }
  5:         ^ syntax error
  6:     }
  6:   }
  6:   }
  6:   }
  6:     }
  6:   }
  6:   }
  5:         ^ syntax error
  6:   }
  5:         ^ syntax error
  6:   }
  5: ^ syntax error
#+END_SRC

*** Correctly identifies correct code 19 times out of 20
#+BEGIN_EXPORT html
<!-- Play on asciinema.com -->
<!-- <a title="asciinema recording" href="https://asciinema.org/a/ttlPidLbP1uOqvqHayYDLomcL" target="_blank"><img alt="asciinema recording" src="https://asciinema.org/a/ttlPidLbP1uOqvqHayYDLomcL.svg" /></a> -->
<!-- Play on the blog -->
<script src="https://asciinema.org/a/ttlPidLbP1uOqvqHayYDLomcL.js" id="asciicast-ttlPidLbP1uOqvqHayYDLomcL" async></script>
#+END_EXPORT

#+BEGIN_SRC text -n :async :results verbatim code
  6:   }
  6:   }
  6:   }
  6: }
  6:   }
  6:   }
  6:   }
  6:   }
  6: }
  6:   }
  6:   }
  6:   }
  6:   }
  6: }
  6:   }
  6:     }
  6:   }
  6:   }
  6:   }
  5:         ^ syntax error
#+END_SRC

** Prompt
#+BEGIN_SRC yaml -n :async :results verbatim code
  task: "Imagine an awk linter"
  doc: "Given a line of awk code, check it for errors"
  issues:
  - This doesn't work very well at all.
  prompt-version: 1
  prompt: |+
      awk -f syntax-test.awk
      awk: syntax-test.awk:1:   x = f(
      awk: syntax-test.awk:1:         ^ unexpected newline or end of string
      awk: syntax-test.awk:2:   for (i=1; i<window_size; i++) {
      awk: syntax-test.awk:3:     s = s memory[i] RS
      awk: syntax-test.awk:4:   }
      awk: syntax-test.awk:5:   <line of code>
      awk: syntax-test.awk:
  engine: "OpenAI Codex"
  temperature: 0.0
  max-tokens: 60
  n-completions: 10
  no-uniq-results: on
  top-p: 1.0
  cache: on
  stop-sequences:
  - "\n"
  vars:
  - "line of code"
  examples:
  - "close cmd, \"to\""
  preprocessors:
  - "cat"
  postprocessor: "grep -v -P \"^6\" | sed \"s/^5: //\""
  filter: yes
  completion: off
  insertion: off
#+END_SRC